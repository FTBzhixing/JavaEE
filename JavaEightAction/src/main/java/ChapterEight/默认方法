默认方法的主要目标用户是类库的设计者
默认方法试图解决的问题:它让类库的设计者放心地改进应用程序接口，无需担忧对
遗留代码的影响，这是因为实现更新接口的类现在会自动继承一个默认的方法实现

类实现了接口时刻意地将一些方法的实现留白。以Iterator接口为例,Iterator接口定义了hasNext、next，还定义了remove方法。
Java 8之前，由于用户通常不会使用该方法，remove方法常被忽略。因此，实现Interator接口的类 通常会为remove方法放置一个空的实现，这些都是些毫无用处的模板代码。
采用默认方法之后，你可以为这种类型的方法提供一个默认的实现，这样实体类就无需在自己的实现中显式地提供一个空方法。

如果一个类使用相同的函数签名从多个地方（比如另一个类或接口）继承了方法，通过三条规则可以进行判断。
(1) 类中的方法优先级最高。类或父类中声明的方法的优先级高于任何声明为默认方法的优先级。
(2) 如果无法依据第一条进行判断，那么子接口的优先级更高：函数签名相同时，优先选择拥有最具体实现的默认方法的接口，即如果B继承了A，那么B就比A更加具体。
(3) 最后，如果还是无法判断，继承了多个接口的类必须通过显式覆盖和调用期望的方法，显式地选择使用哪一个默认方法的实现。